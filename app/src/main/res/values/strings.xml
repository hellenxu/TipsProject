<resources xmlns:xliff="http://schemas.android.com/tools">
    <string name="app_name">TipsProject</string>
    <!--<string name="buy_kindle">我想买%s台<xliff:g id="Kindle">Kindle</xliff:g></string>-->

    <plurals name="buy_kindle">
        <!--<item quantity="zero">我不想买<xliff:g id="Kindle">KINDLE</xliff:g>.</item>-->
        <item quantity="one">我想买一台<xliff:g id="Kindle">KINDLE</xliff:g>.</item>
        <item quantity="other">我想买%d台<xliff:g id="Kindle">Kindle</xliff:g>.</item>
    </plurals>
    <string name="hello_word">Hello</string>

    <string name="much">Adding a Toolbar directly to an AppBarLayout gives you access to the enterAlwaysCollapsed and exitUntilCollapsed scroll flags, but not the detailed control on how different elements react to collapsing. For that, you can use CollapsingToolbarLayout:
        \n\nThis setup uses CollapsingToolbarLayout’s app:layout_collapseMode="pin" to ensure that the Toolbar itself remains pinned to the top of the screen while the view collapses. Even better, when you use CollapsingToolbarLayout and Toolbar together,
        the title will automatically appear larger when the layout is fully visible, then transition to its default size as it is collapsed. Note that in those cases, you should call setTitle() on the CollapsingToolbarLayout, rather than on the Toolbar itself.</string>
    <string name="show_loader">show loader</string>
</resources>
